{
	"info": {
		"_postman_id": "e31a228f-74db-4684-b3ba-2e10a344d1fa",
		"name": "Users API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user with invalid email/phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Api Code is 400\", function () {",
							"    pm.expect(json).to.have.property('code', 400);",
							"});",
							"",
							"pm.test(\"Api message contains info about invalid email\", () => {",
							"  pm.expect(json.message).to.include(\"Field validation for 'Email' failed on the 'email' tag\");",
							"});",
							"",
							"pm.test(\"Api message contains info about invalid phone\", () => {",
							"  pm.expect(json.message).to.include(\"Field validation for 'Phone' failed on the 'phone' tag\");",
							"});",
							"",
							"postman.setNextRequest('Create User');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{$randomUserName}}\", \"email\": \"invalid email\", \"phone\": \"invalid phone\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"var userSchema = {",
							"  type: \"object\",",
							"  properties: {",
							"    id: {type: \"integer\"},",
							"    username: {type: \"string\"},",
							"    email: {type: \"string\"},",
							"    phone: {type: \"string\"},",
							"  },",
							"  required: [\"id\", \"username\"],",
							"  additionalProperties: false,",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Response contains user object\", () => {",
							"  pm.expect(tv4.validate(json, userSchema)).to.eql(true);",
							"  pm.collectionVariables.set(\"userId\", json.id);",
							"});",
							"",
							"postman.setNextRequest('Users List');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{$randomUserName}}\", \"email\": \"{{$randomEmail}}\", \"phone\": \"{{$randomPhoneNumber}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"var userSchema = {",
							"  type: \"object\",",
							"  properties: {",
							"    id: {type: \"integer\"},",
							"    username: {type: \"string\"},",
							"    email: {type: \"string\"},",
							"    phone: {type: \"string\"},",
							"  },",
							"  required: [\"id\", \"username\"],",
							"  additionalProperties: false,",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Response contains user object\", () => {",
							"  pm.expect(json).to.be.an('array');",
							"  const userId = pm.collectionVariables.get(\"userId\");",
							"  // Dirty hack to avoid problem, when run tests within this request",
							"  if (userId !== undefined) {",
							"    const user = json.find(u => u.id === userId);",
							"    pm.expect(tv4.validate(user, userSchema)).to.eql(true);",
							"  }",
							"});",
							"",
							"postman.setNextRequest('Get User');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"var userSchema = {",
							"  type: \"object\",",
							"  properties: {",
							"    id: {type: \"integer\"},",
							"    username: {type: \"string\"},",
							"    email: {type: \"string\"},",
							"    phone: {type: \"string\"},",
							"  },",
							"  required: [\"id\", \"username\"],",
							"  additionalProperties: false,",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Response contains user object\", () => {",
							"  const userId = pm.collectionVariables.get(\"userId\");",
							"  pm.expect(tv4.validate(json, userSchema)).to.eql(true);",
							"  pm.expect(json.id).to.eql(userId);",
							"});",
							"",
							"postman.setNextRequest('Update user with invalid email/phone');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with invalid email/phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Api Code is 400\", function () {",
							"    pm.expect(json).to.have.property('code', 400);",
							"});",
							"",
							"pm.test(\"Api message contains info about invalid email\", () => {",
							"  pm.expect(json.message).to.include(\"Field validation for 'Email' failed on the 'email' tag\");",
							"});",
							"",
							"pm.test(\"Api message contains info about invalid phone\", () => {",
							"  pm.expect(json.message).to.include(\"Field validation for 'Phone' failed on the 'phone' tag\");",
							"});",
							"",
							"postman.setNextRequest('Update User');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{$randomUserName}}\", \"email\": \"invalid email\", \"phone\": \"invalid phone\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"var userSchema = {",
							"  type: \"object\",",
							"  properties: {",
							"    id: {type: \"integer\"},",
							"    username: {type: \"string\"},",
							"    email: {type: \"string\"},",
							"    phone: {type: \"string\"},",
							"  },",
							"  required: [\"id\", \"username\"],",
							"  additionalProperties: false,",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Response contains user object\", () => {",
							"  const userId = pm.collectionVariables.get(\"userId\");",
							"  pm.expect(tv4.validate(json, userSchema)).to.eql(true);",
							"  pm.expect(json.id).to.eql(userId);",
							"});",
							"",
							"postman.setNextRequest('Delete not existing user');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{$randomUserName}}\", \"email\": \"{{$randomEmail}}\", \"phone\": \"{{$randomPhoneNumber}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete not existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Api Code is 404\", function () {",
							"    pm.expect(json).to.have.property('code', 404);",
							"});",
							"",
							"postman.setNextRequest('Delete User');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/99999999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"99999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Api Code is 204\", function () {",
							"    pm.expect(json).to.have.property('code', 204);",
							"});",
							"",
							"postman.setNextRequest('Get Deleted User');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Deleted User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Api Code is 404\", function () {",
							"    pm.expect(json).to.have.property('code', 404);",
							"});",
							"",
							"postman.setNextRequest('Check deleted user in list');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted user in list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test(\"Response should not contains user object\", () => {",
							"  pm.expect(json).to.be.an('array');",
							"  const userId = pm.collectionVariables.get(\"userId\");",
							"  // Dirty hack to avoid problem, when run tests within this request",
							"  if (userId !== undefined) {",
							"    const user = json.find(u => u.id === userId);",
							"    pm.expect(user).to.eql(undefined);",
							"  }",
							"});",
							"",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework"
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}